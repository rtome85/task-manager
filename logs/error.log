{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError logging in user: Invalid credentials\u001b[39m","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at async login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-18 21:45:09"}
{"ip":"::1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Invalid credentials\u001b[39m","method":"POST","path":"/api/auth/login","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at async login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-18 21:45:09","userAgent":"curl/8.16.0"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:21"}
