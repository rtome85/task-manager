{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError logging in user: Invalid credentials\u001b[39m","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at async login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-18 21:45:09"}
{"ip":"::1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Invalid credentials\u001b[39m","method":"POST","path":"/api/auth/login","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at async login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-18 21:45:09","userAgent":"curl/8.16.0"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:21"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:53"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:53"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:53"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:53"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:54"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:54"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:54"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:54"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:54"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:54"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:55"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:55"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:55"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:55"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:55"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:55"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:26"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:26"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:26"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:26"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:27"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:27"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:27"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:27"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:27"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:27"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:27"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:27"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:28"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:28"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:29"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:29"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:57"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:57"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:58"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:58"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:58"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:58"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:58"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:58"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:58"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:58"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:59"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:59"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:59"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:59"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:56"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:56"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:56"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:56"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:57"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:57"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:57"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:58"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:58"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:58"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:58"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:58"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:58"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:29"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:29"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:30"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:30"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:31"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:31"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:31"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:32"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:32"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:32"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:32"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:04"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:04"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:00"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:00"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:00"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:00"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:00"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:00"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:30"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:30"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:30"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:34"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:34"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:34"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:34"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:35"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:35"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:35"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:35"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:36"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:36"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:36"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:36"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:36"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:36"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:37"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:37"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:29"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:29"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:30"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:30"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:31"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:31"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:31"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:31"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:32"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:32"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:42"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:42"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:43"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:43"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:43"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:43"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:44"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:44"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:45"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:45"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:49"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:49"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:50"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:50"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:51"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:51"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError updating task 999999: Task not found\u001b[39m","timestamp":"2025-10-20 20:45:34"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"PUT","path":"/api/tasks/999999","stack":"Error: Task not found\n    at TaskService.updateTask (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:159:23)\n    at updateTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:63:26)","timestamp":"2025-10-20 20:45:34"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError fetching task 14: Task not found\u001b[39m","timestamp":"2025-10-20 20:45:36"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"GET","path":"/api/tasks/14","stack":"Error: Task not found\n    at TaskService.getTaskById (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:138:23)\n    at getTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:47:26)","timestamp":"2025-10-20 20:45:36"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: User with this email already exists\u001b[39m","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:45:40"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: User with this email already exists\u001b[39m","method":"POST","path":"/api/auth/register","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:45:40"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError logging in user: Invalid credentials\u001b[39m","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 20:45:43"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Invalid credentials\u001b[39m","method":"POST","path":"/api/auth/login","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 20:45:43"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError updating task 999999: Task not found\u001b[39m","timestamp":"2025-10-20 20:49:52"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"PUT","path":"/api/tasks/999999","stack":"Error: Task not found\n    at TaskService.updateTask (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:159:23)\n    at updateTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:63:26)","timestamp":"2025-10-20 20:49:52"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError fetching task 27: Task not found\u001b[39m","timestamp":"2025-10-20 20:49:54"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"GET","path":"/api/tasks/27","stack":"Error: Task not found\n    at TaskService.getTaskById (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:138:23)\n    at getTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:47:26)","timestamp":"2025-10-20 20:49:54"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: User with this email already exists\u001b[39m","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:49:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: User with this email already exists\u001b[39m","method":"POST","path":"/api/auth/register","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:49:57"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError logging in user: Invalid credentials\u001b[39m","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 20:49:59"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Invalid credentials\u001b[39m","method":"POST","path":"/api/auth/login","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 20:49:59"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError updating task 999999: Task not found\u001b[39m","timestamp":"2025-10-20 20:51:05"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"PUT","path":"/api/tasks/999999","stack":"Error: Task not found\n    at TaskService.updateTask (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:159:23)\n    at updateTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:63:26)","timestamp":"2025-10-20 20:51:05"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError fetching task 40: Task not found\u001b[39m","timestamp":"2025-10-20 20:51:07"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"GET","path":"/api/tasks/40","stack":"Error: Task not found\n    at TaskService.getTaskById (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:138:23)\n    at getTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:47:26)","timestamp":"2025-10-20 20:51:07"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: User with this email already exists\u001b[39m","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:51:10"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: User with this email already exists\u001b[39m","method":"POST","path":"/api/auth/register","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:51:10"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError logging in user: Invalid credentials\u001b[39m","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 20:51:12"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Invalid credentials\u001b[39m","method":"POST","path":"/api/auth/login","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 20:51:12"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:54"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:54"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:54"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:54"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:55"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:55"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:56"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:56"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:57"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:01:01"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:01:01"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:01:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:01:03"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:01:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:01:03"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError updating task 999999: Task not found\u001b[39m","timestamp":"2025-10-20 21:01:48"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"PUT","path":"/api/tasks/999999","stack":"Error: Task not found\n    at TaskService.updateTask (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:159:23)\n    at updateTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:63:26)","timestamp":"2025-10-20 21:01:48"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError fetching task 53: Task not found\u001b[39m","timestamp":"2025-10-20 21:01:50"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"GET","path":"/api/tasks/53","stack":"Error: Task not found\n    at TaskService.getTaskById (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:138:23)\n    at getTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:47:26)","timestamp":"2025-10-20 21:01:50"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: User with this email already exists\u001b[39m","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:01:54"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: User with this email already exists\u001b[39m","method":"POST","path":"/api/auth/register","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:01:54"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError logging in user: Invalid credentials\u001b[39m","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 21:01:56"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Invalid credentials\u001b[39m","method":"POST","path":"/api/auth/login","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 21:01:56"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError updating task 999999: Task not found\u001b[39m","timestamp":"2025-10-20 21:02:27"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"PUT","path":"/api/tasks/999999","stack":"Error: Task not found\n    at TaskService.updateTask (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:159:23)\n    at updateTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:63:26)","timestamp":"2025-10-20 21:02:28"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError fetching task 66: Task not found\u001b[39m","timestamp":"2025-10-20 21:02:29"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"GET","path":"/api/tasks/66","stack":"Error: Task not found\n    at TaskService.getTaskById (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:138:23)\n    at getTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:47:26)","timestamp":"2025-10-20 21:02:29"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: User with this email already exists\u001b[39m","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:02:32"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: User with this email already exists\u001b[39m","method":"POST","path":"/api/auth/register","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:02:32"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError logging in user: Invalid credentials\u001b[39m","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 21:02:34"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Invalid credentials\u001b[39m","method":"POST","path":"/api/auth/login","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 21:02:34"}
