{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-18 10:13:12"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-18 10:13:12"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-18 10:13:12"}
{"ip":"::1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mGET /healthz\u001b[39m","timeestamp":"2025-10-18T09:14:51.937Z","timestamp":"2025-10-18 10:14:51","userAgent":"curl/8.16.0"}
{"ip":"::1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-18T09:15:47.054Z","timestamp":"2025-10-18 10:15:47","userAgent":"curl/8.16.0"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mNew user registered: test@example.com\u001b[39m","timestamp":"2025-10-18 10:15:48"}
{"ip":"::1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/login\u001b[39m","timeestamp":"2025-10-18T09:16:33.694Z","timestamp":"2025-10-18 10:16:33","userAgent":"curl/8.16.0"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mUser logged in: test@example.com\u001b[39m","timestamp":"2025-10-18 10:16:34"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mSIGINT signal received: closing HTTP server\u001b[39m","timestamp":"2025-10-18 10:20:17"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-18 21:44:52"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-18 21:44:52"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-18 21:44:52"}
{"ip":"::1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/login\u001b[39m","timeestamp":"2025-10-18T20:45:08.519Z","timestamp":"2025-10-18 21:45:08","userAgent":"curl/8.16.0"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError logging in user: Invalid credentials\u001b[39m","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at async login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-18 21:45:09"}
{"ip":"::1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Invalid credentials\u001b[39m","method":"POST","path":"/api/auth/login","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at async login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-18 21:45:09","userAgent":"curl/8.16.0"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-18 21:48:09"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-18 21:48:09"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-18 21:48:09"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-18 21:48:15"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-18 21:48:15"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-18 21:48:15"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 00:18:00"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 00:18:00"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 00:18:00"}
{"ip":"::1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/login\u001b[39m","timeestamp":"2025-10-19T23:48:13.372Z","timestamp":"2025-10-20 00:48:13","userAgent":"curl/8.16.0"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mUser logged in: test@example.com\u001b[39m","timestamp":"2025-10-20 00:48:14"}
{"ip":"::1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mGET /api/tasks\u001b[39m","timeestamp":"2025-10-19T23:48:59.796Z","timestamp":"2025-10-20 00:48:59","userAgent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36"}
{"ip":"::1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mGET /favicon.ico\u001b[39m","timeestamp":"2025-10-19T23:48:59.995Z","timestamp":"2025-10-20 00:48:59","userAgent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36"}
{"ip":"::1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/tasks\u001b[39m","timeestamp":"2025-10-19T23:49:33.585Z","timestamp":"2025-10-20 00:49:33","userAgent":"curl/8.16.0"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mTask created: 1 for user: cmgw2bng60000m6bzzcj7xg81\u001b[39m","timestamp":"2025-10-20 00:49:35"}
{"ip":"::1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mGET /api/tasks\u001b[39m","timeestamp":"2025-10-19T23:50:12.713Z","timestamp":"2025-10-20 00:50:12","userAgent":"curl/8.16.0"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 00:56:27"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 00:56:27"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 00:56:27"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 01:02:12"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 01:02:12"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 01:02:12"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:17.956Z","timestamp":"2025-10-20 01:02:17"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:18.006Z","timestamp":"2025-10-20 01:02:18"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:19.367Z","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:19.429Z","timestamp":"2025-10-20 01:02:19"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:19.692Z","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:19.967Z","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:20.044Z","timestamp":"2025-10-20 01:02:20"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:20.447Z","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:20.556Z","timestamp":"2025-10-20 01:02:20"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:21.166Z","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:21.172Z","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/login\u001b[39m","timeestamp":"2025-10-20T00:02:21.176Z","timestamp":"2025-10-20 01:02:21"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:21.455Z","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/login\u001b[39m","timeestamp":"2025-10-20T00:02:21.459Z","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:21.680Z","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:21.723Z","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:21.916Z","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:21.980Z","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:22.154Z","timestamp":"2025-10-20 01:02:22"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:22.393Z","timestamp":"2025-10-20 01:02:22"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 01:12:46"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 01:12:46"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 01:12:46"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 01:16:12"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 01:16:12"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 01:16:12"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 01:17:15"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 01:17:15"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 01:17:15"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 01:17:34"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 01:17:34"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 01:17:34"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 14:00:04"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 14:00:04"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 14:00:04"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 14:01:00"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 14:01:00"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 14:01:00"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 14:02:46"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 14:02:46"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 14:02:46"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 14:03:03"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 14:03:03"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 14:03:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:03:52.075Z","timestamp":"2025-10-20 14:03:52"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:03:52.249Z","timestamp":"2025-10-20 14:03:52"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:53"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:53"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:53"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:53"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:03:53.765Z","timestamp":"2025-10-20 14:03:53"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:03:53.957Z","timestamp":"2025-10-20 14:03:53"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:54"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:54"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:03:54.203Z","timestamp":"2025-10-20 14:03:54"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:03:54.351Z","timestamp":"2025-10-20 14:03:54"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:03:54.447Z","timestamp":"2025-10-20 14:03:54"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:54"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:54"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:54"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:54"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:03:54.972Z","timestamp":"2025-10-20 14:03:54"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:03:54.996Z","timestamp":"2025-10-20 14:03:54"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:55"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:55"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:55"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:55"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:03:55.599Z","timestamp":"2025-10-20 14:03:55"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/login\u001b[39m","timeestamp":"2025-10-20T13:03:55.603Z","timestamp":"2025-10-20 14:03:55"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:03:55.631Z","timestamp":"2025-10-20 14:03:55"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:03:55.849Z","timestamp":"2025-10-20 14:03:55"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/login\u001b[39m","timeestamp":"2025-10-20T13:03:55.855Z","timestamp":"2025-10-20 14:03:55"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:55"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:03:55"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:03:56.101Z","timestamp":"2025-10-20 14:03:56"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:03:56.183Z","timestamp":"2025-10-20 14:03:56"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:03:56.348Z","timestamp":"2025-10-20 14:03:56"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:03:56.426Z","timestamp":"2025-10-20 14:03:56"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:03:56.670Z","timestamp":"2025-10-20 14:03:56"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:03:56.916Z","timestamp":"2025-10-20 14:03:56"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 14:07:15"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 14:07:15"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 14:07:15"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:07:24.783Z","timestamp":"2025-10-20 14:07:24"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:07:24.888Z","timestamp":"2025-10-20 14:07:24"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:26"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:26"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:26"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:26"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:07:26.460Z","timestamp":"2025-10-20 14:07:26"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:07:26.713Z","timestamp":"2025-10-20 14:07:26"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:07:26.724Z","timestamp":"2025-10-20 14:07:26"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:07:26.960Z","timestamp":"2025-10-20 14:07:26"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:27"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:27"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:27"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:27"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:07:27.351Z","timestamp":"2025-10-20 14:07:27"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:07:27.505Z","timestamp":"2025-10-20 14:07:27"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:27"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:27"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:27"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:27"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:07:28.145Z","timestamp":"2025-10-20 14:07:28"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:28"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:28"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:07:28.682Z","timestamp":"2025-10-20 14:07:28"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:29"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:07:29"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 14:14:50"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 14:14:50"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 14:14:50"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:14:55.639Z","timestamp":"2025-10-20 14:14:55"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:14:55.973Z","timestamp":"2025-10-20 14:14:55"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:14:57.447Z","timestamp":"2025-10-20 14:14:57"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:14:57.682Z","timestamp":"2025-10-20 14:14:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:14:57.752Z","timestamp":"2025-10-20 14:14:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:14:57.913Z","timestamp":"2025-10-20 14:14:57"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:58"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:58"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:58"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:58"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:14:58.300Z","timestamp":"2025-10-20 14:14:58"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:14:58.368Z","timestamp":"2025-10-20 14:14:58"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:58"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:58"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:58"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:58"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:14:58.903Z","timestamp":"2025-10-20 14:14:58"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:59"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:59"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T13:14:59.609Z","timestamp":"2025-10-20 14:14:59"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:59"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 14:14:59"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 14:15:15"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 14:15:15"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 14:15:15"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:00:56.211Z","timestamp":"2025-10-20 15:00:56"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:00:56.212Z","timestamp":"2025-10-20 15:00:56"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:56"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:56"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:56"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:56"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:00:56.915Z","timestamp":"2025-10-20 15:00:56"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:00:56.928Z","timestamp":"2025-10-20 15:00:56"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:00:57.236Z","timestamp":"2025-10-20 15:00:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:00:57.437Z","timestamp":"2025-10-20 15:00:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:00:57.481Z","timestamp":"2025-10-20 15:00:57"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:57"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:00:57.773Z","timestamp":"2025-10-20 15:00:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:00:57.953Z","timestamp":"2025-10-20 15:00:57"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:58"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:58"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:58"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:58"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:00:58.547Z","timestamp":"2025-10-20 15:00:58"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:58"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:00:58"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:09:28.723Z","timestamp":"2025-10-20 15:09:28"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:09:28.816Z","timestamp":"2025-10-20 15:09:28"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:29"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:29"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:09:30.269Z","timestamp":"2025-10-20 15:09:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:09:30.421Z","timestamp":"2025-10-20 15:09:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:09:30.743Z","timestamp":"2025-10-20 15:09:30"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:09:31.065Z","timestamp":"2025-10-20 15:09:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:09:31.065Z","timestamp":"2025-10-20 15:09:31"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:09:31.321Z","timestamp":"2025-10-20 15:09:31"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:31"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:09:31.762Z","timestamp":"2025-10-20 15:09:31"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:32"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:32"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:09:32.271Z","timestamp":"2025-10-20 15:09:32"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:32"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:09:32"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:31:02.225Z","timestamp":"2025-10-20 15:31:02"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:31:02.229Z","timestamp":"2025-10-20 15:31:02"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:31:03.321Z","timestamp":"2025-10-20 15:31:03"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:31:03.358Z","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:31:03.569Z","timestamp":"2025-10-20 15:31:03"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:31:03.604Z","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:31:03.816Z","timestamp":"2025-10-20 15:31:03"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:31:03.850Z","timestamp":"2025-10-20 15:31:03"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:31:03.857Z","timestamp":"2025-10-20 15:31:03"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:31:04.061Z","timestamp":"2025-10-20 15:31:04"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:04"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:31:04"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:34:59.599Z","timestamp":"2025-10-20 15:34:59"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:34:59.658Z","timestamp":"2025-10-20 15:34:59"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:00"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:00"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:00"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:00"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:35:00.818Z","timestamp":"2025-10-20 15:35:00"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:35:00.871Z","timestamp":"2025-10-20 15:35:00"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:00"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:00"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:35:01.059Z","timestamp":"2025-10-20 15:35:01"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:35:01.125Z","timestamp":"2025-10-20 15:35:01"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:35:01.299Z","timestamp":"2025-10-20 15:35:01"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:35:01.308Z","timestamp":"2025-10-20 15:35:01"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:35:01.376Z","timestamp":"2025-10-20 15:35:01"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:35:01.625Z","timestamp":"2025-10-20 15:35:01"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:01"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:35:29.773Z","timestamp":"2025-10-20 15:35:29"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:35:29.773Z","timestamp":"2025-10-20 15:35:29"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:30"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:35:30.960Z","timestamp":"2025-10-20 15:35:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:35:30.988Z","timestamp":"2025-10-20 15:35:30"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:35:31.194Z","timestamp":"2025-10-20 15:35:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:35:31.220Z","timestamp":"2025-10-20 15:35:31"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:35:31.425Z","timestamp":"2025-10-20 15:35:31"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:35:31.432Z","timestamp":"2025-10-20 15:35:31"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:35:31.447Z","timestamp":"2025-10-20 15:35:31"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:35:31.675Z","timestamp":"2025-10-20 15:35:31"}
{"clientVersion":"6.17.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","name":"PrismaClientInitializationError","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31merror: Environment variable not found: DATABASE_URL_TESTS.\u001b[39m\n\u001b[31m  -->  schema.prisma:15\u001b[39m\n\u001b[31m   | \u001b[39m\n\u001b[31m14 |   provider = \"postgresql\"\u001b[39m\n\u001b[31m15 |   url      = env(\"DATABASE_URL_TESTS\")\u001b[39m\n\u001b[31m   | \u001b[39m\n\n\u001b[31mValidation Error Count: 1\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nerror: Environment variable not found: DATABASE_URL_TESTS.\n  -->  schema.prisma:15\n   | \n14 |   provider = \"postgresql\"\n15 |   url      = env(\"DATABASE_URL_TESTS\")\n   | \n\nValidation Error Count: 1\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7568)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:35:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:36:33.637Z","timestamp":"2025-10-20 15:36:33"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:36:33.698Z","timestamp":"2025-10-20 15:36:33"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:34"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:34"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:34"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:34"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:36:35.073Z","timestamp":"2025-10-20 15:36:35"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:36:35.091Z","timestamp":"2025-10-20 15:36:35"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:36:35.311Z","timestamp":"2025-10-20 15:36:35"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:35"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:35"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:36:35.551Z","timestamp":"2025-10-20 15:36:35"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:36:35.795Z","timestamp":"2025-10-20 15:36:35"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:35"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:35"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:36:35.906Z","timestamp":"2025-10-20 15:36:35"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:36"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:36"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:36"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:36"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:36:36.507Z","timestamp":"2025-10-20 15:36:36"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:36"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:36"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T14:36:37.037Z","timestamp":"2025-10-20 15:36:37"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:37"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 15:36:37"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T19:41:28.725Z","timestamp":"2025-10-20 20:41:28"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T19:41:28.726Z","timestamp":"2025-10-20 20:41:28"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:29"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:29"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T19:41:30.168Z","timestamp":"2025-10-20 20:41:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T19:41:30.288Z","timestamp":"2025-10-20 20:41:30"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T19:41:30.541Z","timestamp":"2025-10-20 20:41:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T19:41:30.672Z","timestamp":"2025-10-20 20:41:30"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T19:41:30.792Z","timestamp":"2025-10-20 20:41:30"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T19:41:31.091Z","timestamp":"2025-10-20 20:41:31"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T19:41:31.349Z","timestamp":"2025-10-20 20:41:31"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:31"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:31"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T19:41:31.929Z","timestamp":"2025-10-20 20:41:31"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:32"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:41:32"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:42"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:42"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:43"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:43"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:43"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:43"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:44"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:44"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:45"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:45"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:49"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:49"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:50"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:50"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:51"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:44:51"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError updating task 999999: Task not found\u001b[39m","timestamp":"2025-10-20 20:45:34"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"PUT","path":"/api/tasks/999999","stack":"Error: Task not found\n    at TaskService.updateTask (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:159:23)\n    at updateTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:63:26)","timestamp":"2025-10-20 20:45:34"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError fetching task 14: Task not found\u001b[39m","timestamp":"2025-10-20 20:45:36"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"GET","path":"/api/tasks/14","stack":"Error: Task not found\n    at TaskService.getTaskById (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:138:23)\n    at getTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:47:26)","timestamp":"2025-10-20 20:45:36"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: User with this email already exists\u001b[39m","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:45:40"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: User with this email already exists\u001b[39m","method":"POST","path":"/api/auth/register","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:45:40"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError logging in user: Invalid credentials\u001b[39m","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 20:45:43"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Invalid credentials\u001b[39m","method":"POST","path":"/api/auth/login","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 20:45:43"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError updating task 999999: Task not found\u001b[39m","timestamp":"2025-10-20 20:49:52"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"PUT","path":"/api/tasks/999999","stack":"Error: Task not found\n    at TaskService.updateTask (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:159:23)\n    at updateTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:63:26)","timestamp":"2025-10-20 20:49:52"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError fetching task 27: Task not found\u001b[39m","timestamp":"2025-10-20 20:49:54"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"GET","path":"/api/tasks/27","stack":"Error: Task not found\n    at TaskService.getTaskById (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:138:23)\n    at getTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:47:26)","timestamp":"2025-10-20 20:49:54"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: User with this email already exists\u001b[39m","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:49:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: User with this email already exists\u001b[39m","method":"POST","path":"/api/auth/register","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:49:57"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError logging in user: Invalid credentials\u001b[39m","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 20:49:59"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Invalid credentials\u001b[39m","method":"POST","path":"/api/auth/login","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 20:49:59"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError updating task 999999: Task not found\u001b[39m","timestamp":"2025-10-20 20:51:05"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"PUT","path":"/api/tasks/999999","stack":"Error: Task not found\n    at TaskService.updateTask (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:159:23)\n    at updateTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:63:26)","timestamp":"2025-10-20 20:51:05"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError fetching task 40: Task not found\u001b[39m","timestamp":"2025-10-20 20:51:07"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"GET","path":"/api/tasks/40","stack":"Error: Task not found\n    at TaskService.getTaskById (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:138:23)\n    at getTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:47:26)","timestamp":"2025-10-20 20:51:07"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: User with this email already exists\u001b[39m","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:51:10"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: User with this email already exists\u001b[39m","method":"POST","path":"/api/auth/register","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 20:51:10"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError logging in user: Invalid credentials\u001b[39m","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 20:51:12"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Invalid credentials\u001b[39m","method":"POST","path":"/api/auth/login","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 20:51:12"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:54"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:54"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:54"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:54"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:55"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:55"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:56"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:56"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:57"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:00:57"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:01:01"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:01:01"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:01:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:01:03"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:01:03"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:01:03"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError updating task 999999: Task not found\u001b[39m","timestamp":"2025-10-20 21:01:48"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"PUT","path":"/api/tasks/999999","stack":"Error: Task not found\n    at TaskService.updateTask (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:159:23)\n    at updateTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:63:26)","timestamp":"2025-10-20 21:01:48"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError fetching task 53: Task not found\u001b[39m","timestamp":"2025-10-20 21:01:50"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"GET","path":"/api/tasks/53","stack":"Error: Task not found\n    at TaskService.getTaskById (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:138:23)\n    at getTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:47:26)","timestamp":"2025-10-20 21:01:50"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: User with this email already exists\u001b[39m","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:01:54"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: User with this email already exists\u001b[39m","method":"POST","path":"/api/auth/register","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:01:54"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError logging in user: Invalid credentials\u001b[39m","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 21:01:56"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Invalid credentials\u001b[39m","method":"POST","path":"/api/auth/login","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 21:01:56"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError updating task 999999: Task not found\u001b[39m","timestamp":"2025-10-20 21:02:27"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"PUT","path":"/api/tasks/999999","stack":"Error: Task not found\n    at TaskService.updateTask (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:159:23)\n    at updateTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:63:26)","timestamp":"2025-10-20 21:02:28"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError fetching task 66: Task not found\u001b[39m","timestamp":"2025-10-20 21:02:29"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Task not found\u001b[39m","method":"GET","path":"/api/tasks/66","stack":"Error: Task not found\n    at TaskService.getTaskById (/home/roberto/Work/tutorials/task-manager-api/src/services/taskService.js:138:23)\n    at getTask (/home/roberto/Work/tutorials/task-manager-api/src/controllers/taskController.js:47:26)","timestamp":"2025-10-20 21:02:29"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: User with this email already exists\u001b[39m","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:02:32"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: User with this email already exists\u001b[39m","method":"POST","path":"/api/auth/register","stack":"Error: User with this email already exists\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:19:23)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 21:02:32"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError logging in user: Invalid credentials\u001b[39m","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 21:02:34"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Invalid credentials\u001b[39m","method":"POST","path":"/api/auth/login","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-20 21:02:34"}
