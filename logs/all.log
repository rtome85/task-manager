{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-18 10:13:12"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-18 10:13:12"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-18 10:13:12"}
{"ip":"::1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mGET /healthz\u001b[39m","timeestamp":"2025-10-18T09:14:51.937Z","timestamp":"2025-10-18 10:14:51","userAgent":"curl/8.16.0"}
{"ip":"::1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-18T09:15:47.054Z","timestamp":"2025-10-18 10:15:47","userAgent":"curl/8.16.0"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mNew user registered: test@example.com\u001b[39m","timestamp":"2025-10-18 10:15:48"}
{"ip":"::1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/login\u001b[39m","timeestamp":"2025-10-18T09:16:33.694Z","timestamp":"2025-10-18 10:16:33","userAgent":"curl/8.16.0"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mUser logged in: test@example.com\u001b[39m","timestamp":"2025-10-18 10:16:34"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mSIGINT signal received: closing HTTP server\u001b[39m","timestamp":"2025-10-18 10:20:17"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-18 21:44:52"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-18 21:44:52"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-18 21:44:52"}
{"ip":"::1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/login\u001b[39m","timeestamp":"2025-10-18T20:45:08.519Z","timestamp":"2025-10-18 21:45:08","userAgent":"curl/8.16.0"}
{"level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError logging in user: Invalid credentials\u001b[39m","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at async login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-18 21:45:09"}
{"ip":"::1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: Invalid credentials\u001b[39m","method":"POST","path":"/api/auth/login","stack":"Error: Invalid credentials\n    at AuthService.login (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:67:23)\n    at async login (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:28:28)","timestamp":"2025-10-18 21:45:09","userAgent":"curl/8.16.0"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-18 21:48:09"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-18 21:48:09"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-18 21:48:09"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-18 21:48:15"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-18 21:48:15"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-18 21:48:15"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 00:18:00"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 00:18:00"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 00:18:00"}
{"ip":"::1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/login\u001b[39m","timeestamp":"2025-10-19T23:48:13.372Z","timestamp":"2025-10-20 00:48:13","userAgent":"curl/8.16.0"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mUser logged in: test@example.com\u001b[39m","timestamp":"2025-10-20 00:48:14"}
{"ip":"::1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mGET /api/tasks\u001b[39m","timeestamp":"2025-10-19T23:48:59.796Z","timestamp":"2025-10-20 00:48:59","userAgent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36"}
{"ip":"::1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mGET /favicon.ico\u001b[39m","timeestamp":"2025-10-19T23:48:59.995Z","timestamp":"2025-10-20 00:48:59","userAgent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36"}
{"ip":"::1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/tasks\u001b[39m","timeestamp":"2025-10-19T23:49:33.585Z","timestamp":"2025-10-20 00:49:33","userAgent":"curl/8.16.0"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mTask created: 1 for user: cmgw2bng60000m6bzzcj7xg81\u001b[39m","timestamp":"2025-10-20 00:49:35"}
{"ip":"::1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mGET /api/tasks\u001b[39m","timeestamp":"2025-10-19T23:50:12.713Z","timestamp":"2025-10-20 00:50:12","userAgent":"curl/8.16.0"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 00:56:27"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 00:56:27"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 00:56:27"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 01:02:12"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 01:02:12"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 01:02:12"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:17.956Z","timestamp":"2025-10-20 01:02:17"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:18.006Z","timestamp":"2025-10-20 01:02:18"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:19.367Z","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:19.429Z","timestamp":"2025-10-20 01:02:19"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:19.692Z","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:19.967Z","timestamp":"2025-10-20 01:02:19"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:20.044Z","timestamp":"2025-10-20 01:02:20"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:20.447Z","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:20.556Z","timestamp":"2025-10-20 01:02:20"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:20"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:21.166Z","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:21.172Z","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/login\u001b[39m","timeestamp":"2025-10-20T00:02:21.176Z","timestamp":"2025-10-20 01:02:21"}
{"clientVersion":"6.17.1","code":"P5010","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError registering user: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","meta":{"modelName":"User"},"name":"PrismaClientKnownRequestError","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[31merror\u001b[39m","message":"\u001b[31mError: \u001b[39m\n\u001b[31mInvalid `prisma.user.findUnique()` invocation in\u001b[39m\n\u001b[31m/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\u001b[39m\n\n\u001b[31m  11 const { email, password, name } = userData;\u001b[39m\n\u001b[31m  12 try {\u001b[39m\n\u001b[31m  13     // Check if user already exists\u001b[39m\n\u001b[31m→ 14     const existingUser = await prisma.user.findUnique(\u001b[39m\n\u001b[31mCannot fetch data from service:\u001b[39m\n\u001b[31mfetch failed\u001b[39m","method":"POST","path":"/api/auth/register","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:52\n\n  11 const { email, password, name } = userData;\n  12 try {\n  13     // Check if user already exists\n→ 14     const existingUser = await prisma.user.findUnique(\nCannot fetch data from service:\nfetch failed\n    at ei.handleRequestError (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:7268)\n    at ei.handleRequestError [as handleAndLogRequestError] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6593)\n    at ei.handleAndLogRequestError [as request] (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:124:6300)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at a (/home/roberto/Work/tutorials/task-manager-api/src/generated/prisma/runtime/library.js:133:9551)\n    at AuthService.register (/home/roberto/Work/tutorials/task-manager-api/src/services/authService.js:14:34)\n    at register (/home/roberto/Work/tutorials/task-manager-api/src/controllers/authController.js:9:28)","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:21.455Z","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/login\u001b[39m","timeestamp":"2025-10-20T00:02:21.459Z","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:21.680Z","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:21.723Z","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:21.916Z","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:21.980Z","timestamp":"2025-10-20 01:02:21"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:22.154Z","timestamp":"2025-10-20 01:02:22"}
{"ip":"::ffff:127.0.0.1","level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mPOST /api/auth/register\u001b[39m","timeestamp":"2025-10-20T00:02:22.393Z","timestamp":"2025-10-20 01:02:22"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 01:12:46"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 01:12:46"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 01:12:46"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 01:16:12"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 01:16:12"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 01:16:12"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 01:17:15"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 01:17:15"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 01:17:15"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mDatabase connected successfully\u001b[39m","timestamp":"2025-10-20 01:17:34"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mServer is running on http://localhost:3000\u001b[39m","timestamp":"2025-10-20 01:17:34"}
{"level":"\u001b[32minfo\u001b[39m","message":"\u001b[32mEnvironment: development\u001b[39m","timestamp":"2025-10-20 01:17:34"}
